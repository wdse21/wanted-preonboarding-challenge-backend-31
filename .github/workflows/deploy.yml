name: deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  ECS_CONTAINER_TASK_NAME: ${{ secrets.AWS_ECS_CONTAINER_TASK_NAME }}

permissions:
  contents: read

jobs:
  lint:
    name: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: ['18.x', '20.x', '22.x']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get npm cache directory
        id: npm-cache
        shell: bash
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: |
            cache-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            cache-npm-
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint

  test:
    name: test
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: ['18.x', '20.x', '22.x']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get npm cache directory
        id: npm-cache
        shell: bash
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: |
            cache-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            cache-npm-
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test

  build:
    name: build
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: ['18.x', '20.x', '22.x']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get npm cache directory
        id: npm-cache
        shell: bash
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: |
            cache-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            cache-npm-
      - name: Install dependencies
        run: npm ci
      - name: Run build
        run: npm run build --if-present

  deploy:
    name: deploy
    needs: ['lint', 'test', 'build']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Pull docker image to Amazon ECR
        id: pull-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: prod
        # AWS ECR에 업로드 되어 있는 해당 이미지로 교체
        run: |
          echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Retrieve most recent ECS task definition JSON file
        id: retrieve-task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_CONTAINER_TASK_NAME }} --query taskDefinition > task-definition.json
          cat task-definition.json
          echo "task-def-file=task-definition.json" >> $GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.AWS_ECS_CONTAINER_NAME }}
          image: ${{ steps.pull-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.AWS_ECS_CONTAINER_SERVICE }}
          cluster: ${{ secrets.AWS_ECS_CONTAINER_CLUSTER }}
          wait-for-service-stability: true
